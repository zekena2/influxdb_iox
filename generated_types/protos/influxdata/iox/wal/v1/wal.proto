syntax = "proto3";
package influxdata.iox.wal.v1;
option go_package = "github.com/influxdata/iox/wal/v1";

import "influxdata/iox/delete/v1/service.proto";
import "influxdata/pbdata/v1/influxdb_pb_data_protocol.proto";

/// Persist information that can be saved to the WAL. Used during replay to evict data from memory.
message PersistOp {
  // The catalog namespace ID
  int64 namespace_id = 1;

  // The catalog table ID
  int64 table_id = 2;

  // The catalog partition ID
  int64 partition_id = 3;

  // The Parquet file UUID in object storage
  string parquet_file_uuid = 4;
}

// WAL operation with a sequence number, used to inform read buffers when to evict data
message SequencedWalOp {
  // Was the op-level sequence number.
  reserved "sequence_number";
  reserved 1;

  // A mapping which assigns a sequence number per table ID affected by this WAL
  // operation.
  //
  // Because this operation contains data for exactly one partition per table,
  // this transitively tracks the sequence numbers per partition within this op.
  map<int64, uint64> table_write_sequence_numbers = 5;

  oneof op {
    influxdata.pbdata.v1.DatabaseBatch write = 2;
    influxdata.iox.delete.v1.DeletePayload delete = 3;
    PersistOp persist = 4;
  }
}

// Collection of WAL operations (they get batched into a single write into the WAL)
message WalOpBatch {
  // the ops
  repeated SequencedWalOp ops = 1;
}